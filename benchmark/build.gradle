buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id 'com.android.library'
    id 'androidx.benchmark'
}

def modelPlaceholder = 'no_model'
def modelFilePath = project.hasProperty('model_file') ? project.property('model_file').toString() : modelPlaceholder

def configPlaceholder = 'no_config'
def configFilePath = project.hasProperty('config_file') ? project.property('config_file').toString() : configPlaceholder
def configFileName = new File(configFilePath).getName()

def assetsDir = new File(project.buildDir, 'depthgauger_assets').toString()

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        minSdkVersion 24 // 24 required by ORT, otherwise 23
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'

        resValue 'string', 'configFileName', configFileName

        testInstrumentationRunner 'androidx.benchmark.junit4.AndroidBenchmarkRunner'
        testInstrumentationRunnerArgument 'androidx.benchmark.profiling.mode', 'method'

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }
    }

    testBuildType = 'release'

    buildTypes {
        release {
            isDefault = true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'benchmark-proguard-rules.pro'
        }
    }

    aaptOptions {
        noCompress 'ort', 'pt', 'tflite', 'zip'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits {
        abi {
            enable true
            reset() // Resets the list of ABIs that Gradle should create APKs for to none
            include 'arm64-v8a', 'armeabi-v7a'
            universalApk true
        }
    }

    flavorDimensions "framework"
    productFlavors {
        onnx {
            dimension "framework"
            versionNameSuffix "-onnx"
        }

        fluency {
            dimension "framework"
            versionNameSuffix "-fluency"
        }

        pytorch {
            dimension "framework"
            versionNameSuffix "-pytorch"
        }

        tensorflow {
            dimension "framework"
            versionNameSuffix "-tensorflow"
        }
    }

    sourceSets {
        onnx {
            assets.srcDirs = [assetsDir]
            java.srcDirs = ['src/onnx/java', 'src/main/java']
        }

        pytorch {
            assets.srcDirs = [assetsDir]
            java.srcDirs = ['src/pytorch/java', 'src/main/java']
        }

        tensorflow {
            assets.srcDirs = [assetsDir]
            java.srcDirs = ['src/tensorflow/java', 'src/main/java']
        }

        fluency {
            assets.srcDirs = [assetsDir]
            java.srcDirs = ['src/fluency/java', 'src/main/java']
        }
    }
}

dependencies {
    // Android test
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'junit:junit:4.13.2'

    // Benchmark
    androidTestImplementation 'androidx.benchmark:benchmark-junit4:1.1.0-alpha02'

    // MS App Center
    androidTestImplementation 'com.microsoft.appcenter:espresso-test-extension:1.4'

    // JSON parsing
    implementation 'com.squareup.moshi:moshi:1.12.0'
    implementation 'com.squareup.moshi:moshi-adapters:1.12.0'

    // Utilities
    implementation 'com.google.guava:guava:30.1.1-android'

    // Frameworks
    onnxImplementation project(":onnxruntime-release")
    pytorchImplementation 'org.pytorch:pytorch_android:1.8.0'
    tensorflowImplementation 'org.tensorflow:tensorflow-lite:2.4.0'
    tensorflowImplementation 'org.tensorflow:tensorflow-lite-gpu:2.4.0'
    tensorflowImplementation 'org.tensorflow:tensorflow-lite-select-tf-ops:2.4.0'
}

task deleteAssetsDir(type: Delete) {
    delete assetsDir
    followSymlinks = true
}

task prepareAssetsDir {
    dependsOn 'deleteAssetsDir'
    doLast {
        mkdir assetsDir
    }
}

task copyModel(type: Copy, dependsOn: prepareAssetsDir) {
    from modelFilePath
    into assetsDir
}

task copyConfig(type: Copy, dependsOn: prepareAssetsDir) {
    from configFilePath
    into assetsDir
}

clean.dependsOn deleteAssetsDir
preBuild.dependsOn copyModel
preBuild.dependsOn copyConfig
